cmdhistory=["(defn foo [a] (inc a))" "(+ 1 1)" "(defn foo [a] (inc a))" "(ns-publics *ns*)" "(slurp \\"/dev/random\\")" "(foo)" "(foo 5)" "(foo 4)" "*ns*" "(ns-publics *ns*)" "5" "(slurp \\"nothing\\")" "5" "(defn bar \\n  [a b]\\n  (+ a b))" "(bar 4 5)" "(defn bar \\n  [a b]\\n  (+ a b))" "(defn foo [a] (inc a))" "(ns-publics *ns*)" "5" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(app {\:uri \\"/hello\\"})" "(def server (jetty/run-jetty \#\u2019app {\:port 8080 \:join? false}))" "(clojure.pprint test)" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (with-out-str\\n            (clojure.pprint request))})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (with-out-str\\n            (pprint request))})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\:uri request)})" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "*ns*" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (with-out-str\\n           (pprint request))})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (with-out-str\\n           (request))})" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\:uri request)})" "\\n(defn app \\n  [request]\\n  {\:status 200\\n   \:body (with-out-str \\"this\\")})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\:uri request)})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\\n           with-out-str (\:uri request))})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\:uri request)})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\\"string\\")})" "(defn app \\n  [request]\\n  {\:status 200\\n   \:body (\:uri request)})" "(def server (jetty/run-jetty \#\u2019app {\:port 8080 \:join? false}))" "\\n(defn homepage\\n  [request])\\n\\n(defn redirect\\n  [id]\\n  id)\\n\\n(defroutes app\\n  (GET \\"/\\" request (homepage request))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(defroutes app\\n  (GET \\"/\\" request (homepage request))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "\\n(defroutes app\\n  (GET \\"/\\" request (homepage request))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(swap\! counter inc)" "(use startingclojure.app \:reload)" "(use 'startingclojure.app/app \:reload)" "(use 'startingclojure.app \:reload)" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(swap\! counter inc)" "counter" "(reset\! counter 10000)" "counter" "(shorten \\"hi\\")" "(shorten \\"\\")" "counter" "(Long/toString 10005 36)" "(refresh)" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(shorten \\"\\")" "(counter)" "counter" "(use 'clojure.tools.namespace.repl \:only (refresh))" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(shorten \\"http\://clojure.org\\")" "urls" "(shorten \\"http\://scuitgera.com\\")" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(homepage [request])" "(homepage request)" "(.stop server)" "(use '[clojure.tools.namespace.repl \:only (refresh)])" "(refresh)" "(.stop server)" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(shorten \\"http\://scutigera.com\\")" "(.stop server)" "(.start server)" "(.stop server)" "(.start server)" "(shorten \\"http\://kaeding-valentine.net\\")" "(get @urls \\"7pt\\")" "(@urls \\"7pt\\")" "(def server (jetty/run-jetty \#\u2019app {\:port 8080 \:join? false}))" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(shorten \\"http\://scutigera.com\\")" "(shorten \\"http\://kaeding-valentine.net\\")" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n)" "urls" "(swap\! urls dissoc \\"7px\\")" "(swap\! urls dissoc \\"7pw\\")" "(swap\! urls dissoc \\"7pv\\")" "urls" "(def baselist (list\: \:dog \:cat))" "(def baselist (list \:dog \:cat))" "(def one (cons \:parrot baselist))" "one" "baselist" "(def two (cons \:another baselist))" "two" "baselist" "one" "(\= (next one) (next two))" "(next one)" "(next two)" "two" "(first one)" "(first two)" "(rest one)" "(rest two)" "(\= (rest one) (rest two))" "(identical? (rest one) (rest two))" "(def ypi 22/7)\\nypi" "(one two three)" "(def three (list \:apple \:pear))" "(one two three)" "(+ one two three)" "(conj one two three)" "(map one two three)" "one" "(conj '() one two three)" "(def newlist (conj '() one two three))" "new list" "newlist" "\\n(en/deftemplate form\\n  (en/xml-resource \\"form.html\\")\\n  [request]\\n  )" "(.toUpperCase \\"Java class\\")" "(.indexOf \\"A linger synergize\\" \\"y\\")" "(java.lang.Math/abs -3)" "(java.lang.Math/PI)" "(java.lang.System/getenv)" "(java.lang.System/getProperty)" "(java.lang.System/getProperty \\"user.dir\\")" "(System/getProperty \\"java.version\\")" "(let [file (java.io.File. \\"/\\")]\\n  (println (.exists file))\\n  (println (.canWrite file))\\n  (println (.getPath file)))" "(let [s (java.io.StringWriter.)]\\n  (spit s \\"somthing\\")\\n  (.toString s))" "(let [string (java.io.StringReader. \\"get something\\")]\\n  (slurp string))" "(spit \\"tmp/todo-list\\"\\n      \\"- this" "(spit \\"temp/todo\\"\\n      \\"up to all\\")" "(lists \\"henry\\")" "baselist" "lists" "(lists \\"charlie\\")" "<type clojure code here>"]
eclipse.preferences.version=1
